import requests
from datetime import datetime
import pytz

# 기본 설정
hours = [0, 3, 6, 9, 12, 15, 18, 21]
base_demand = [50, 48, 55, 70, 90, 88, 75, 60]
LCOE_solar, LCOE_wind, LCOE_nuclear, LCOE_storage = 40, 35, 50, 10
nuclear_output = 35
storage_capacity = 50
storage = 0

# PM2.5 영향 계산
def calculate_pm25_impact(pm25):
    return max(0.5, 1 - 0.005 * (pm25 / 10))

weather_impact = {"맑음": 1.0, "흐림": 0.75, "비": 0.5}

# 실제 날씨 데이터 가져오기 (온양6동 위도/경도)
def get_real_weather_data():
    try:
        lat, lon = 36.7581, 127.0178   # 온양6동 좌표
        timezone = "Asia/Seoul"
        weather_url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&hourly=temperature_2m,shortwave_radiation,windspeed_10m,weathercode&timezone={timezone}"
        response = requests.get(weather_url)
        data = response.json()
        weather_data = data["hourly"]

        now = datetime.now(pytz.timezone(timezone))
        index_map = {hour: None for hour in hours}
        for i, t in enumerate(weather_data["time"]):
            hour = int(t[-5:-3])
            if hour in index_map and index_map[hour] is None:
                index_map[hour] = i

        idx_list = [index_map[h] for h in hours]
 온도 = [날씨_데이터 ["온도_2m"]][i] (idx_list에서 i의 경우)
 solar_rad = [날씨_데이터 ["단파_radiation"][i] for idx_list]
 바람 = [날씨_데이터 ["풍속_10m"][i] (i] for idx_list]
 code_map = {0: "맑음", 1: "흐림", 2: "비", 3: "눈", 45: "흐림", 51: "비"}
 날씨 = [code_map.get(날씨_data["weathercode"][i", "맑음") (idx_list에서 i에 대해)
 pm25 = [30] * 8

 복귀 온도, 태양열_라드, 바람, 오후 25, 날씨

 예외: e:
 print("데이터 수집 오류:", e)
 return [25]*8, [500]*8, [5]*8, [30]*8, ["맑음"]*8

# 시나리오 정의
def get_scenario_data(이름):
 이름 == "맑은 날"인 경우:
 반환 [25]*8, [시간 내에 h가 6 <= h <= 18일 경우 800, h가 0일 경우], [4]*8, [20]*8, ["맑음"]*8, base_demand
 엘프 이름 == "폭풍우":
 반품 [20]*8, [0]*8, [12]*8, [80]*8, ["비"]*8, 기본_수요
 elif name == "에너지 공급 취약":
 반환 [32]*8, [100]*8, [3.2]*8, [120]*8, ["흐림"]*8, [base_demand에서 d에 대한 int(d*1.4)]
 엘프 이름 == "흐린 날":
 반환 [18]*8, [시간 내 h에 대해 6 <= h <= 18인 경우 300), [4]*8, [50]*8, ["흐림"]*8, 기본_수요
 엘프 이름 == "눈 내리는 날":
 반환 [-2]*8, [시간 단위로 h가 6 <= h <= 18일 경우 0], [7]*8, [30]*8, ["흐림"]*8, [base_demand에서 d의 경우 int(d*1.1)]]을 반환합니다
 그렇지 않으면:
 반환 get_real_weather_data () + (base_demand,)

# 재생에너지 발전량 계산
def calculate_renewable_에너지(temp, 태양열_라드, 바람_속도, pm25, 날씨):
 태양열, 풍력 = [], []
 범위 (8)의 i에 대해:
 기본 = max(0, (solar_rad[i] / 1000) * 50 * (1 - 0.005 * (temp[i] - 25))
 eff = 계산_pm25_impact(pm25[i] * weather_impact.get(weather[i], 1.0)
 태양열.append(베이스 * eff)
 바람.append(바람_속도[i] < 3 또는 바람_속도[i] > 25개의 다른 30 * (바람_속도[i] / 10) ** 3인 경우 0)
 태양열, 바람의 귀환

# 에너지 믹스 최적화
def optimize_energy_mix(solar, 바람, 수요):
 글로벌 스토리지
 최적화_solar, 최적화_바람, 스토리지_usage = [], [], []
 총 비용 = 0
 범위 (8)의 i에 대해:
 필요 = 수요 [i] - 핵_출력
 사용 가능한 = 태양열 [i] + 바람 [i]
 사용 가능한 경우 < 필수:
 중고 = min(저장, 필수 - 사용 가능)
 저장소 -= 사용됨
 storage_usage.append(사용됨)
 그렇지 않으면:
 잉여 = 사용 가능 - 필수
 저장소 + 잉여 <= 저장소_용량:
 저장소 += 잉여
 그렇지 않으면:
 잉여 -= (스토리지_용량 - 스토리지)
 저장소 = 저장소_용량
 ratio_s = solar[i] / 사용 가능한 경우 0
 ratio_w = wind [i] / 사용 가능한 경우 0
 태양열 [i] -= 잉여 * 비율_s
            wind[i] -= surplus * ratio_w
            storage_usage.append(0)
        optimized_solar.append(solar[i])
        optimized_wind.append(wind[i])
        total_cost += (solar[i] * LCOE_solar) + (wind[i] * LCOE_wind) + (nuclear_output * LCOE_nuclear) + (storage_usage[i] * LCOE_storage)
    return optimized_solar, optimized_wind, total_cost

# 실행
print("\n🌍 시나리오를 선택하세요:")
scenarios = ["맑은 날", "폭풍우", "에너지 공급 취약", "흐린 날", "눈 내리는 날"]
for idx, name in enumerate(scenarios, 1):
    print(f"{idx}. {name}")
print("입력: 사용자 정의")
choice = input("\n👉 선택 (1~5/입력): ")

if choice in [str(i) for i in range(1, 6)]:
    temp, solar_rad, wind_spd, pm25, weather, demand = get_scenario_data(scenarios[int(choice)-1])
else:
    temp, solar_rad, wind_spd, pm25, weather = get_real_weather_data()
    demand = base_demand

solar_gen, wind_gen = calculate_renewable_energy(temp, solar_rad, wind_spd, pm25, weather)
solar_opt, wind_opt, cost_opt = optimize_energy_mix(solar_gen, wind_gen, demand)

# 결과 출력
print("\n⚡ 최적 에너지 조합 (3시간 간격) ⚡")
for i in range(8):
    total = solar_opt[i] + wind_opt[i] + nuclear_output
    print(f"{hours[i]:02d}시 - 태양광: {solar_opt[i]:.1f}MW, 풍력: {wind_opt[i]:.1f}MW, 원자력: {nuclear_output:.1f}MW, 총: {total:.1f}MW")

print(f"\n💰 총 발전 비용: {cost_opt:,.0f} 원")

print("✅ 기상청 API 데이터 확인")
print("🌡️ 기온:", temp)
print("☀️ 일사량:", solar_rad)
print("💨 풍속:", wind_spd)
print("🌫️ PM2.5:", pm25)
print("🌦️ 날씨 상태:", weather)
